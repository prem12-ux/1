/***deadlock_avoidance***/
#include<stdio.h>
#include<string.h>
void main()
{
        int alloc[10][10],max[10][10];
        int avail[10],work[10],total[10];
        int i,j,k,n,need[10][10];
        int m;
        int count=0,c=0;
        char finish[10];
        printf("Enter the no. of processes and resources:");
        scanf("%d%d",&n,&m);
        for(i=0;i<=n;i++) finish[i]='n';
        printf("Enter the claim matrix:\n");
        for(i=0;i<n;i++)
                for(j=0;j<m;j++) scanf("%d",&max[i][j]);
        printf("Enter the allocation matrix:\n");
        for(i=0;i<n;i++)
                for(j=0;j<m;j++) scanf("%d",&alloc[i][j]);
        printf("Resource vector:");
        for(i=0;i<m;i++) scanf("%d",&total[i]);
        for(i=0;i<m;i++)
                avail[i]=0;
        for(i=0;i<n;i++)
                for(j=0;j<m;j++) avail[j]+=alloc[i][j];
        for(i=0;i<m;i++) work[i]=avail[i];
        for(j=0;j<m;j++) work[j]=total[j]-work[j];
        for(i=0;i<n;i++)
                for(j=0;j<m;j++) need[i][j]=max[i][j]-alloc[i][j];
        A:
        for(i=0;i<n;i++)
        {
                c=0;
                for(j=0;j<m;j++)
                        if((need[i][j]<=work[j])&&(finish[i]=='n')) c++;
                if(c==m)
                {
                        printf("All the resources can be allocated to Process %d", i+1);
                        printf("\n\nAvailable resources are:");
                        for(k=0;k<m;k++)
                        {
                                work[k]+=alloc[i][k];
                                printf("%4d",work[k]);
                        }
                        printf("\n");
                        finish[i]='y';
                        printf("\nProcess %d executed?:%c \n",i+1,finish[i]); count++;
                }
        }
        if(count!=n) goto A;
        else    printf("\n System is in safe mode");
        printf("\n The given state is safe state");
}
/***deadlock_dectection***/
#include<stdio.h>
int max[100][100],alloc[100][100],need[100][100],avail[100];
int n,r;
void input();
void show();
void cal();
int main()
{
        int i,j;
        printf("           Deadlock Detection Algo             \n");
        input();
        show();
        cal();
        return 0;
}
void input()
{
        int i,j;
        printf("Enter the no of Processes\t");
        scanf("%d",&n);
        printf("Enter the no of resource instances\t");
        scanf("%d",&r);
        printf("Enter the Max Matrix\n");
        for(i=0;i<n;i++)
        {
                for(j=0;j<r;j++)
                {
                        scanf("%d",&max[i][j]);
                }
        }
        printf("Enter the Allocation Matrix\n");
        for(i=0;i<n;i++)
        {
                for(j=0;j<r;j++)
                {
                        scanf("%d",&alloc[i][j]);
                }
        }
        printf("Enter the available Resources\n");
        for(j=0;j<r;j++)
        {
                scanf("%d",&avail[j]);
        }
}
void show()
{
        int i,j;
        printf("Process\t Allocation\t Max\t Available\t");
        for(i=0;i<n;i++)
        {
                printf("\nP%d\t ",i+1);
                for(j=0;j<r;j++)
                {
                        printf("%d ",alloc[i][j]);
                }
                printf("\t");
                for(j=0;j<r;j++)
                {
                                         printf("%d ",max[i][j]);
                }
                printf("\t");
                if(i==0)
                {
                        for(j=0;j<r;j++) printf("%d ",avail[j]);
                }
        }
}
void cal()
{
        int finish[100],temp,need[100][100],flag=1,k,c1=0,dead[100],safe[100],i,j;
        for(i=0;i<n;i++)
        {
                finish[i]=0;
        }
        //find need matrix
        for(i=0;i<n;i++)
        {
                for(j=0;j<r;j++)
                {
                        need[i][j]=max[i][j]-alloc[i][j];
                }
        }
        while(flag)
        {
                flag=0;
                for(i=0;i<n;i++)
                {
                        int c=0;
                        for(j=0;j<r;j++)
                        {
                                if((finish[i]==0)&&(need[i][j]<=avail[j]))
                                {
                                        c++;
                                        if(c==r)
                                        {
                                                for(k=0;k<r;k++)
                                                {
                                                        avail[k]+=alloc[i][j];
                                                        finish[i]=1;
                                                        flag=1;
                                                }
                                                //printf("\nP%d",i);
                                                if(finish[i]==1)
                                                {
                                                        i=n;
                                                }
                                        }
                                }
                        }
                }
        }
        j=0;
        flag=0;
        for(i=0;i<n;i++)
        {
           if(finish[i]==0)
                {
                        dead[j]=i;
                        j++;
                        flag=1;
                }
        }
        if(flag==1)
        {
                printf("\n\nSystem is in Deadlock and the Deadlock process are\n");
                for(i=0;i<n;i++)
                {
                        printf("P%d\t",dead[i]);
                }
        }
        else
        {
                printf("\nNo Deadlock Occur");
        }
}
/***sequencial**/
#include<stdio.h>
#include<stdlib.h>
int main()
{
        int f[50],i,st,j,len,k,c;
        for(i=0;i<50;i++) f[i]=0;
        X:
        printf("\nEnter the starting block & length of file:");
        scanf("%d%d",&st,&len);
        for(j=st;j<(st+len);j++)
        {
                if(f[j]==0)
                {
                        f[j]=1;
                        printf("\n%d->%d",j,f[j]);
                }
                else
                {
                        printf("Block already allocated");
                        break;
                }
        }
        if(j==(st+len))
        printf("\nThe file is allocated to disk");
        printf("\nIf u want to enter more files?  (yes-1  /  no-0):");
        scanf("%d",&c);
        if(c==1)
                goto X;
        else
                exit(1);
}
/***LFU****/
#include<stdio.h>
int main()
{
        int f,p;
        int pages[50],frame[10],hit=0,count[50],time[50];
        int i,j,page,flag,least,minTime,temp;
        printf("Enter no of frames : ");
        scanf("%d",&f);
        printf("Enter no of pages : ");
        scanf("%d",&p);
        for(i=0;i<f;i++)
        {
                frame[i]=-1;
        }
        for(i=0;i<50;i++)
        {
                count[i]=0;
        }
        printf("Enter page no : \n");
        for(i=0;i<p;i++)
        {
                scanf("%d",&pages[i]);
        }
        printf("\n");
        for(i=0;i<p;i++)
        {
                count[pages[i]]++;
                time[pages[i]]=i;
                flag=1;
                least=frame[0];
                for(j=0;j<f;j++)
                {
                        if(frame[j]==-1 || frame[j]==pages[i])
                        {
                                if(frame[j]!=-1)
                                {
                                        hit++;
                                }
                                flag=0;
                                frame[j]=pages[i];
                                break;
                        }
                        if(count[least]>count[frame[j]])
                        {
                                least=frame[j];
                        }
                }
                if(flag)
                {
                        minTime=50;
                        for(j=0;j<f;j++)
                        {
                                if(count[frame[j]]==count[least] && time[frame[j]]<minTime)
                                {
                                        temp=j;
                                        minTime=time[frame[j]];
        return 0;
}
                        count[frame[temp]]=0;
                        frame[temp]=pages[i];
                }
                for(j=0;j<f;j++)
                {
                        printf("%d ",frame[j]);
                }
                printf("\n");
        }
        printf("Page fault = %d\n",p-hit);
        printf("Page hit = %d",hit);
        return 0;
}
                frame[i]=-1;
}
/*******LRU***/
#include<stdio.h>
int fr[3];
void display();
void main()
{
        int p[12]={2,3,2,1,5,2,4,5,3,2,5,2},i,j,fs[3];
        int index,k,l,flag1=0,flag2=0,pf=0,frsize=3;
        for(i=0;i<3;i++)
        {
                fr[i]=-1;
        }
        for(j=0;j<12;j++)
        {
                flag1=0,flag2=0;
                for(i=0;i<3;i++)
                {
                        if(fr[i]==p[j])
                        {
                                flag1=1;
                                flag2=1;
                                break;
                        }
                }
                if(flag1==0)
                {
                        for(i=0;i<3;i++)
                        {
                                if(fr[i]==-1)
                                {
                                        fr[i]=p[j];
                                        flag2=1;
                                        break;
                                }
                        }
                }
                if(flag2==0)
                {
                        for(i=0;i<3;i++) fs[i]=0;
                        for(k=j-1,l=1;l<=frsize-1;l++,k--)
                        {
                                for(i=0;i<3;i++)
                                {
                                        if(fr[i]==p[k]) fs[i]=1;
                                }
                        }
                        for(i=0;i<3;i++)
                        {
                                if(fs[i]==0) index=i;
                        }
                        fr[index]=p[j];
                        pf++;
                }
                display();
        }
        printf("\n no of page faults :%d",pf+frsize);
}
void display()
{
        int i;
        printf("\n");
        for(i=0;i<3;i++)        printf("\t%d",fr[i]);
}
/****FIFo******/
#include<stdio.h>
void display();
int fr[3];
void main()
{
        int i,j,page[12]={2,3,2,1,5,2,4,5,3,2,5,2};
        int flag1=0,flag2=0,pf=0,frsize=3,top=0;
        for(i=0;i<3;i++)
        {
                fr[i]=-1;
        }
        for(j=0;j<12;j++)
        {
                flag1=0;
                flag2=0;
                for(i=0;i<3;i++)
                {
                        if(fr[i]==page[j])
                        {
                                flag1=1;
                                flag2=1;
                                break;
                        }
                }
                if(flag1==0)
                {
                        for(i=0;i<frsize;i++)
                        {
                                if(fr[i]==-1)
                                {
                                        fr[i]=page[j];
                                        flag2=1;
                                        break;
                                }
                        }
                }
                if(flag2==0)
                {
                        fr[top]=page[j];
                        top++;
                        pf++;
                        if(top>=frsize) top=0;
                }
                display();
        }

        printf("Number of page faults : %d ",pf+frsize);
}

void display()
{
        int i;
        printf("\n");
        for(i=0;i<3;i++) printf("%d\t",fr[i]);
}
/****ipc shared part-1***/
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/shm.h>
#include<string.h>
int main()
{
        int i;
        void *shared_memory;
        char buff[100];
        int shmid;
        shmid=shmget((key_t)2345, 1024, 0666|IPC_CREAT);
        printf("Key of shared memory is %d\n",shmid);
        shared_memory=shmat(shmid,NULL,0); //process attached to shared memory segment
        printf("Process attached at %p\n",shared_memory);
        printf("Enter some data to write to shared memory\n");
        read(0,buff,100); //get some input from user
        strcpy(shared_memory,buff); //data written to shared memory
        printf("You wrote : %s\n",(char *)shared_memory);
}
/***ipc shared part-2***/
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<sys/shm.h>
#include<string.h>
int main()
{
        int i;
        void *shared_memory;
        char buff[100];
        int shmid;
        shmid=shmget((key_t)2345, 1024, 0666);
        printf("Key of shared memory is %d\n",shmid);
        shared_memory=shmat(shmid,NULL,0); //process attached to shared memory segment
        printf("Process attached at %p\n",shared_memory);
        printf("Data read from shared memory is : %s\n",(char *)shared_memory);
}
/*****MVT*****/
#include<stdio.h>
int main()
{
        int ms,mp[10],i, temp,n=0;
        char ch = 'y';
        printf("\nEnter the total memory available (in Bytes):");
        scanf("%d",&ms);
        temp=ms;
        for(i=0;ch=='y';i++,n++)
        {
                printf("\nEnter memory required for process %d (in Bytes):",i+1);
                scanf("%d",&mp[i]);
                if(mp[i]<=temp)
                {
                        printf("\nMemory is allocated for Process %d ",i+1);
                        temp = temp - mp[i];
                }
                else
                {
                        printf("\nMemory is Full");
                        break;
                }
                printf("\nDo you want to continue(y/n) -- ");
                scanf(" %c", &ch);
        }
        printf("\n\nTotal Memory Available:%d", ms);
        printf("\n\n\tPROCESS\t\t MEMORY ALLOCATED ");
        for(i=0;i<n;i++)        printf("\n \t%d\t\t%d",i+1,mp[i]);
        printf("\n\nTotal Memory Allocated is %d",ms-temp);
        printf("\nTotal External Fragmentation is %d",temp);
}
/****MFT*****/
#include<stdio.h>
int main()
{
        int ms,bs,nob,ef,n, mp[10],tif=0;
        int i,p=0;
        printf("Enter the total memory available (in Bytes):");
        scanf("%d",&ms);
        printf("Enter the block size (in Bytes):");
        scanf("%d", &bs);
        nob=ms/bs;
        ef=ms - nob*bs;
        printf("Enter the number of processes:");
        scanf("%d",&n);
        for(i=0;i<n;i++)
        {
                printf("Enter memory required for process %d (in Bytes):",i+1);
                scanf("%d",&mp[i]);
        }
        printf("\nNo. of Blocks available in memory:%d",nob);
        printf("\n\nPROCESS\tMEMORY REQUIRED\tALLOCATED\tINTERNAL FRAGMENTATION");
        for(i=0;i<n && p<nob;i++)
        {
                printf("\n %d\t\t%d",i+1,mp[i]);
                if(mp[i] > bs)  printf("\t\tNO\t\t---");
                else
                {
                        printf("\t\tYES\t%d",bs-mp[i]);
                        tif = tif + bs-mp[i];
                        p++;
                }
        }
        if(i<n)  printf("\nMemory is Full, Remaining Processes cannot be accomodated");
        printf("\n\nTotal Internal Fragmentation is %d",tif);
        printf("\nTotal External Fragmentation is %d",ef);
}
/****priority****/
#include<stdio.h>
int main()
{
        int p[20],bt[20],pri[20],wt[20],tat[20],i,k,n,temp;
        float wtavg,tatavg;

        printf("Enter the number of processes : ");
        scanf("%d",&n);
        for(i=0;i<n;i++)
        {
                p[i]=i;
                printf("Enter the Burst Time & Priority of Process %d : ",i);
                scanf("%d %d",&bt[i],&pri[i]);
        }
        for(i=0;i<n;i++)
                for(k=i+1;k<n;k++)
                        if(pri[i]>pri[k])
                        {
                                temp=p[i];
                                p[i]=p[k];
                                p[k]=temp;
                                temp=bt[i];
                                bt[i]=bt[k];
                                bt[k]=temp;
                                temp=pri[i];
                                pri[i]=pri[k];
                                pri[k]=temp;
                        }
        wtavg=wt[0]=0;
        tatavg=tat[0]=bt[0];
        for(i=1;i<n;i++)
        {
                wt[i]=wt[i-1]+bt[i-1];
                tat[i]=tat[i-1]+bt[i];

                wtavg=wtavg+wt[i];
                tatavg=tatavg+tat[i];
        }
        printf("\n PROCESS\tPRIORITY\tBURST TIME\tWAITING TIME\tTURNAROUNDTIME");
        for(i=0;i<n;i++)
                printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d ",p[i],pri[i],bt[i],wt[i],tat[i]);
        printf("\nAverage Waiting Time is : %f",wtavg/n);
        printf("\nAverage Turnaround Time is : %f",tatavg/n);

}
/****robins algorithm***/
#include<stdio.h>
int main()
{
        int bt[10],n,t[10],wt[10],sum=0,i,tq,tat[10],x=0;
        float tat1=0,twt=0;
        printf("Enter time quantum:");
        scanf("%d",&tq);
        printf("Enter number of processors:");
        scanf("%d",&n);
        printf("Enter cpu burst times");
        for(i=1;i<=n;i++)
        {
                scanf("%d",&bt[i]);
                t[i]=bt[i];
                sum=sum+bt[i];
        }
        while(sum>0)
        {
                for(i=1;i<=n;i++)
                {
                        if(bt[i]!=0)
                        {
                                if(bt[i]>tq)
                                {
                                        x=x+tq;
                                        bt[i]=bt[i]-tq;
                                        sum=sum-tq;
                                }
                                else
                                {
                                        x=x+bt[i];
                                        sum=sum-bt[i];
                                        bt[i]=0;
                                        tat[i]=x;
                                        wt[i]=tat[i]-t[i];
                                }
                        }
                }
        }
        printf("jobS\t cpu turn time\t waiting time");
        for(i=1;i<=n;i++)
        {
                printf("\n%d\t%d\t%d\t%d\t",i,t[i],tat[i],wt[i]);
        }
        for(i=1;i<=n;i++)
        {
                tat1=tat1+tat[i];
                twt=twt+wt[i];
        }
        tat1=tat1/n;
        twt=twt/n;
        printf("\n average turn around time=%f",tat1);
        printf("\n average waiting time=%f",twt);
}
/****SJF****/
#include<stdio.h>
int main()
{
        int i,n,bt[10],wt[10],tat[20],j,t,s;
        int p[10];
        float twt=0,ttat=0;
        printf("Enter no.of process:");
        scanf("%d",&n);
        for(i=1;i<=n;i++)
        {
                printf("Enter the processor and bursttime:");
                scanf("%d %d",&p[i],&bt[i]);
        }
        for(i=1;i<=n;i++)
        {
                for(j=i+1;j<=n;j++)
                {
                        if(bt[i]>bt[j])
                        {
                                t=bt[i];
                                s=p[i];
                                bt[i]=bt[j];
                                p[i]=p[j];
                                bt[j]=t;
                                p[j]=s;
                        }
                }
        }
        wt[1]=0;
        for(i=1;i<=n;i++)
        {
                tat[i]=wt[i]+bt[i];
                wt[i+1]=tat[i];
        }
        for(i=1;i<=n;i++)
        {
                twt=twt+wt[i];
                ttat=ttat+tat[i];
        }
        printf("proc\tbt\twt\ttat\n");
        for(i=1;i<=n;i++)
        {
                printf("p%d\t%d\t%d\t%d\n",p[i],bt[i],wt[i],tat[i]);
        }
        printf("\n\n average waiting time is %f",twt/n);
        printf("\n\n average turn around time is %f",ttat/n);
}
/****FCFs algorithm**//
#include<stdio.h>
float fcfs(int[],int);
int main()
{
        int i,n,p[10],bt[10],bt1[10];
        printf("enter no.of processes:");
        scanf("%d",&n);
        for (i=1;i<=n;i++)
        {
                printf("enter the processor and burst time:");
                scanf("%d %d",&p[i],&bt[i]);
                bt1[i]=bt[i];
        }
        fcfs(bt,n);
}

float fcfs(int bt[],int n)
{
        int wt[10],tat[10],i;
        float twt=0,ttat=0;
        wt[1]=0;
        for(i=1;i<=n;i++)
        {
                tat[i]=wt[i]+bt[i];
                wt[i+1]=bt[i]+wt[i];
        }
        for(i=1;i<=n;i++)
        {
                twt=twt+wt[i];
                ttat=ttat+tat[i];
        }
        for(i=1;i<=n;i++)
        {
                printf("%d\t%d\t%d\n",bt[i],wt[i],tat[i]);
        }
        printf("\n\n average waiting time is %f",twt/n);
        printf("\n\n average turn around time is %f",ttat/n);
}
/***Execvp***/
#include<unistd.h>
#include<sys/types.h>
#include<stdio.h>
int main(int argc,char *argv[])
{
        int status;
        if(fork()==0)
        {
                execvp(argv[1],&argv[1]);
                fprintf(stderr,"couldnot execute %s \n",argv[1]);

        }
}
/***exec***/
#include<stdio.h>
main()
{
printf("i am process %d and iam about exec an ls -1\n",getpid());
execl("/bin/ls","ls","-1",NULL);
printf("this line should never be executed\n");
}
/***fork and wait***/
#include<sys/wait.h>
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int main()
{
        int pid,status,childpid;
        printf("parent process with pid is %d \n ",getpid());
        pid=fork();
        if(pid!=0)
        {
                sleep(1);
                printf("parent process with pid %d and ppid %d \n",getpid(),getppid());
                childpid=wait(&status);
                printf("child process pid %d terminated with exit code %d \n",childpid,status>>8);
        }
        else
        {
                printf("child process with pid %d and ppid %d \n",getpid(),getppid());
                sleep(5);
                exit(42);
        }
        printf("PID %d terminates \n ",getpid());
}
/*****unix ls-1 command****/
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <stdlib.h>
int main()
{
int pid; //process id
pid = fork(); //create another process
if ( pid < 0 )
{ //fail
printf("\nFork failed\n");
exit (-1);
}
else if ( pid == 0 )
{ //child
execlp ("/bin/ls", "ls", "-l", NULL ); //execute ls
}
else
{ //parent
wait (NULL); //wait for child
printf("\nchild complete\n");
exit (0);
}
}
/*****Vfork******/
#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
int global=5;
int main()
{
int pid,local=6;
pid=vfork();
if(pid==0)
{
global++;
local--;
exit(0);
}
printf("\n %d  %d",global,local);
exit(0);
}
/****copy stimulation*****/
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
void main()
{
        char buf;
        int fd_one, fd_two;
        fd_one = open("second", O_RDONLY);
        if (fd_one == -1)
        {
                printf("Error opening second_file");
                close(fd_one);
                return;
        }
        fd_two = open("secondcp",
         O_WRONLY | O_CREAT,
         S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
        while(read(fd_one, &buf, 1))
        {
                write(fd_two, &buf, 1);
        }
        printf("Successful copy");
        close(fd_one);
        close(fd_two);
}
/*****linked_list*******/
#include<stdio.h>
#include<stdlib.h>
int main()
{
 int f[50],p,i,j,k,a,st,len,n,c;
 for(i=0;i<50;i++)
  f[i]=0;
 printf("Enter how many blocks that are already allocated :\n");
 scanf("%d",&p);
 printf("\nEnter the blocks no.s that are already allocated :\n");
 for(i=0;i<p;i++)
 {
 scanf("%d",&a);
 f[a]=1;
 }
 X:
 printf("Enter the starting index block & length :\n");
 scanf("%d%d",&st,&len);
 k=len;
 for(j=st;j<(k+st);j++)
 {
  if(f[j]==0)
  {
   f[j]=1;
   printf("\n%d->%d",j,f[j]);
  }
  else
  {
   printf("\n %d->file is already allocated",j);
   k++;
  }
 }
 printf("\n If u want to enter one more file? (yes-1/no-0) :\n");
 scanf("%d",&c);
 if(c==1)
 goto X;
 else
 exit(0);
}
/*****indexed*****/
#include<stdio.h>
#include<stdlib.h>
int main()
{
	int f[50],i,n,ind,c,file[50];
	for(i=0;i<50;i++)
	{
		f[i]=0;
	}
	x:
		printf("enter index block:");
		scanf("%d",&ind);
		if(f[ind]==0)
		{
			f[ind]=1;
			printf("enter no of files to allocate:");
			scanf("%d",&n);
		}
		else
		{
			printf("block already allocated\n");
			goto x;
		}
		printf("enter %d files:\n",n);
		for(i=0;i<n;i++)
		{
			scanf("%d",&file[i]);
		}
		for(i=0;i<n;i++)
		{
			if(f[file[i]]==1)
			{
				printf("block already allocated\n");
				goto x;
			}
		}
		for(i=0;i<n;i++)
		{
			f[file[i]]=1;
		}
		printf("files allocated\n");
		for(i=0;i<n;i++)
		{
			printf("block %d indexed at %d\n",file[i],ind);
		}
		printf("\nif u want to allocate another file? enter 1 for y and 0 for N: ");
		scanf("%d",&c);
		if(c==1)
		{
			goto x;
		}
		else
		{
			exit(1);	
		}		
}
/**two_commads**/
#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>
#include<stdlib.h>
int main()
{
        int pfds[2];
        char buf[200];
        if(pipe(pfds)==-1)
        {
                perror("pipe failed");
                exit(1);
        }
        if(!fork())
        {
                close(1);
                dup(pfds[1]);
                system("ls-1");
        }
        else
                printf("parent reading from pipe \n");
        while (read(pfds[0],buf,200))
                printf("%s\n",buf);
}


//Producer Consumer Problem

#include<stdio.h>
int mutex=1,full=0,empty=3,x=0; main()
{
int n;
void producer(); void consumer(); int wait(int);
int signal(int); printf("\n1.PRODUCER\n2.CONSUMER\n3.EXIT\n"); while(1) {
printf("\nENTER YOUR CHOICE\n"); scanf("%d",&n);
switch(n)
{ case 1:
if((mutex==1)&&(empty!=0)) producer();
else
printf("BUFFER IS FULL");
 break;	
 


case 2: if((mutex==1)&&(full!=0)) consumer();
else
printf("BUFFER IS EMPTY");
break; case 3:
exit(0); break;
}
}
}
int wait(int s) { return(--s); }
int signal(int s) { return(++s); } void producer() {
mutex=wait(mutex); full=signal(full); empty=wait(empty); x++;
printf("\nproducer produces the item%d",x); mutex=signal(mutex); }
void consumer() { mutex=wait(mutex); full=wait(full); empty=signal(empty);
printf("\n consumer consumes item%d",x); x--;
mutex=signal(mutex); }
